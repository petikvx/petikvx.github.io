Imports System
Imports System.Collections
Imports System.IO
Imports System.Reflection
Imports System.Runtime.InteropServices
Imports System.Security.Cryptography
Imports System.Text

' Token: 0x02000015 RID: 21
Friend Class Class8
	' Token: 0x06000059 RID: 89 RVA: 0x000038A8 File Offset: 0x00001AA8
	Shared Sub New()
		Class8.uint_0 = New UInteger() { 3614090360UI, 3905402710UI, 606105819UI, 3250441966UI, 4118548399UI, 1200080426UI, 2821735955UI, 4249261313UI, 1770035416UI, 2336552879UI, 4294925233UI, 2304563134UI, 1804603682UI, 4254626195UI, 2792965006UI, 1236535329UI, 4129170786UI, 3225465664UI, 643717713UI, 3921069994UI, 3593408605UI, 38016083UI, 3634488961UI, 3889429448UI, 568446438UI, 3275163606UI, 4107603335UI, 1163531501UI, 2850285829UI, 4243563512UI, 1735328473UI, 2368359562UI, 4294588738UI, 2272392833UI, 1839030562UI, 4259657740UI, 2763975236UI, 1272893353UI, 4139469664UI, 3200236656UI, 681279174UI, 3936430074UI, 3572445317UI, 76029189UI, 3654602809UI, 3873151461UI, 530742520UI, 3299628645UI, 4096336452UI, 1126891415UI, 2878612391UI, 4237533241UI, 1700485571UI, 2399980690UI, 4293915773UI, 2240044497UI, 1873313359UI, 4264355552UI, 2734768916UI, 1309151649UI, 4149444226UI, 3174756917UI, 718787259UI, 3951481745UI }
		Class8.KpuekOaAnu = False
		Class8.bool_0 = False
		Class8.byte_0 = New Byte(-1) {}
		Class8.byte_3 = New Byte(-1) {}
		Class8.byte_1 = New Byte(-1) {}
		Class8.byte_2 = New Byte(-1) {}
		Class8.intptr_2 = IntPtr.Zero
		Class8.intptr_1 = IntPtr.Zero
		Class8.string_0 = New String(-1) {}
		Class8.int_4 = New Integer(-1) {}
		Class8.int_2 = 1
		Class8.bool_4 = False
		Class8.sortedList_0 = New SortedList()
		Class8.int_0 = 0
		Class8.ilgepGragg = 0L
		Class8.delegate1_0 = Nothing
		Class8.delegate1_1 = Nothing
		Class8.long_0 = 0L
		Class8.int_1 = 0
		Class8.bool_5 = False
		Class8.bool_3 = False
		Class8.int_3 = 0
		Class8.intptr_0 = IntPtr.Zero
		Class8.bool_1 = False
		Class8.hashtable_0 = New Hashtable()
		Try
			RSACryptoServiceProvider.UseMachineKeyStore = True
		Catch
		End Try
	End Sub

	' Token: 0x0600005A RID: 90 RVA: 0x00002675 File Offset: 0x00000875
	Private Sub YAn2vRBxfrt63()
	End Sub

	' Token: 0x0600005B RID: 91 RVA: 0x000039DC File Offset: 0x00001BDC
	Friend Shared Function smethod_0(byte_4 As Byte()) As Byte()
		Dim array As UInteger() = New UInteger(15) {}
		Dim num As Integer = 448 - byte_4.Length * 8 Mod 512
		Dim num2 As UInteger = CUInt(((num + 512) Mod 512))
		If num2 = 0UI Then
			num2 = 512UI
		End If
		Dim num3 As UInteger = CUInt((CLng(byte_4.Length) + CLng(CULng((num2 / 8UI))) + 8L))
		Dim num4 As ULong = CULng((CLng(byte_4.Length) * 8L))
		Dim array2 As Byte() = New Byte(num3 - 1) {}
		For i As Integer = 0 To byte_4.Length - 1
			array2(i) = byte_4(i)
		Next
		Dim array3 As Byte() = array2
		Dim num5 As Integer = byte_4.Length
		array3(num5) = array3(num5) Or 128
		For j As Integer = 8 To 0 + 1 Step -1
			' The following expression was wrapped in a checked-expression
			' The following expression was wrapped in a unchecked-expression
			array2(CInt((CType((CULng(num3) - CULng(CLng(j))), IntPtr)))) = CByte((num4 >> (8 - j) * 8 And 255UL))
		Next
		Dim num6 As UInteger = CUInt((array2.Length * 8 / 32))
		Dim num7 As UInteger = 1732584193UI
		Dim num8 As UInteger = 4023233417UI
		Dim num9 As UInteger = 2562383102UI
		Dim num10 As UInteger = 271733878UI
		For num11 As UInteger = 0UI To num6 / 16UI - 1
			Dim num12 As UInteger = num11 << 6
			For num13 As UInteger = 0UI To 61UI - 1 Step 4UI
				array(CInt(CType((num13 >> 2), UIntPtr))) = CUInt((CInt(array2(CInt(CType((num12 + (num13 + 3UI)), UIntPtr)))) << 24 Or CInt(array2(CInt(CType((num12 + (num13 + 2UI)), UIntPtr)))) << 16 Or CInt(array2(CInt(CType((num12 + (num13 + 1UI)), UIntPtr)))) << 8 Or CInt(array2(CInt(CType((num12 + num13), UIntPtr))))))
			Next
			Dim num14 As UInteger = num7
			Dim num15 As UInteger = num8
			Dim num16 As UInteger = num9
			Dim num17 As UInteger = num10
			Class8.smethod_1(num7, num8, num9, num10, 0UI, 7US, 1UI, array)
			Class8.smethod_1(num10, num7, num8, num9, 1UI, 12US, 2UI, array)
			Class8.smethod_1(num9, num10, num7, num8, 2UI, 17US, 3UI, array)
			Class8.smethod_1(num8, num9, num10, num7, 3UI, 22US, 4UI, array)
			Class8.smethod_1(num7, num8, num9, num10, 4UI, 7US, 5UI, array)
			Class8.smethod_1(num10, num7, num8, num9, 5UI, 12US, 6UI, array)
			Class8.smethod_1(num9, num10, num7, num8, 6UI, 17US, 7UI, array)
			Class8.smethod_1(num8, num9, num10, num7, 7UI, 22US, 8UI, array)
			Class8.smethod_1(num7, num8, num9, num10, 8UI, 7US, 9UI, array)
			Class8.smethod_1(num10, num7, num8, num9, 9UI, 12US, 10UI, array)
			Class8.smethod_1(num9, num10, num7, num8, 10UI, 17US, 11UI, array)
			Class8.smethod_1(num8, num9, num10, num7, 11UI, 22US, 12UI, array)
			Class8.smethod_1(num7, num8, num9, num10, 12UI, 7US, 13UI, array)
			Class8.smethod_1(num10, num7, num8, num9, 13UI, 12US, 14UI, array)
			Class8.smethod_1(num9, num10, num7, num8, 14UI, 17US, 15UI, array)
			Class8.smethod_1(num8, num9, num10, num7, 15UI, 22US, 16UI, array)
			Class8.smethod_2(num7, num8, num9, num10, 1UI, 5US, 17UI, array)
			Class8.smethod_2(num10, num7, num8, num9, 6UI, 9US, 18UI, array)
			Class8.smethod_2(num9, num10, num7, num8, 11UI, 14US, 19UI, array)
			Class8.smethod_2(num8, num9, num10, num7, 0UI, 20US, 20UI, array)
			Class8.smethod_2(num7, num8, num9, num10, 5UI, 5US, 21UI, array)
			Class8.smethod_2(num10, num7, num8, num9, 10UI, 9US, 22UI, array)
			Class8.smethod_2(num9, num10, num7, num8, 15UI, 14US, 23UI, array)
			Class8.smethod_2(num8, num9, num10, num7, 4UI, 20US, 24UI, array)
			Class8.smethod_2(num7, num8, num9, num10, 9UI, 5US, 25UI, array)
			Class8.smethod_2(num10, num7, num8, num9, 14UI, 9US, 26UI, array)
			Class8.smethod_2(num9, num10, num7, num8, 3UI, 14US, 27UI, array)
			Class8.smethod_2(num8, num9, num10, num7, 8UI, 20US, 28UI, array)
			Class8.smethod_2(num7, num8, num9, num10, 13UI, 5US, 29UI, array)
			Class8.smethod_2(num10, num7, num8, num9, 2UI, 9US, 30UI, array)
			Class8.smethod_2(num9, num10, num7, num8, 7UI, 14US, 31UI, array)
			Class8.smethod_2(num8, num9, num10, num7, 12UI, 20US, 32UI, array)
			Class8.smethod_3(num7, num8, num9, num10, 5UI, 4US, 33UI, array)
			Class8.smethod_3(num10, num7, num8, num9, 8UI, 11US, 34UI, array)
			Class8.smethod_3(num9, num10, num7, num8, 11UI, 16US, 35UI, array)
			Class8.smethod_3(num8, num9, num10, num7, 14UI, 23US, 36UI, array)
			Class8.smethod_3(num7, num8, num9, num10, 1UI, 4US, 37UI, array)
			Class8.smethod_3(num10, num7, num8, num9, 4UI, 11US, 38UI, array)
			Class8.smethod_3(num9, num10, num7, num8, 7UI, 16US, 39UI, array)
			Class8.smethod_3(num8, num9, num10, num7, 10UI, 23US, 40UI, array)
			Class8.smethod_3(num7, num8, num9, num10, 13UI, 4US, 41UI, array)
			Class8.smethod_3(num10, num7, num8, num9, 0UI, 11US, 42UI, array)
			Class8.smethod_3(num9, num10, num7, num8, 3UI, 16US, 43UI, array)
			Class8.smethod_3(num8, num9, num10, num7, 6UI, 23US, 44UI, array)
			Class8.smethod_3(num7, num8, num9, num10, 9UI, 4US, 45UI, array)
			Class8.smethod_3(num10, num7, num8, num9, 12UI, 11US, 46UI, array)
			Class8.smethod_3(num9, num10, num7, num8, 15UI, 16US, 47UI, array)
			Class8.smethod_3(num8, num9, num10, num7, 2UI, 23US, 48UI, array)
			Class8.smethod_4(num7, num8, num9, num10, 0UI, 6US, 49UI, array)
			Class8.smethod_4(num10, num7, num8, num9, 7UI, 10US, 50UI, array)
			Class8.smethod_4(num9, num10, num7, num8, 14UI, 15US, 51UI, array)
			Class8.smethod_4(num8, num9, num10, num7, 5UI, 21US, 52UI, array)
			Class8.smethod_4(num7, num8, num9, num10, 12UI, 6US, 53UI, array)
			Class8.smethod_4(num10, num7, num8, num9, 3UI, 10US, 54UI, array)
			Class8.smethod_4(num9, num10, num7, num8, 10UI, 15US, 55UI, array)
			Class8.smethod_4(num8, num9, num10, num7, 1UI, 21US, 56UI, array)
			Class8.smethod_4(num7, num8, num9, num10, 8UI, 6US, 57UI, array)
			Class8.smethod_4(num10, num7, num8, num9, 15UI, 10US, 58UI, array)
			Class8.smethod_4(num9, num10, num7, num8, 6UI, 15US, 59UI, array)
			Class8.smethod_4(num8, num9, num10, num7, 13UI, 21US, 60UI, array)
			Class8.smethod_4(num7, num8, num9, num10, 4UI, 6US, 61UI, array)
			Class8.smethod_4(num10, num7, num8, num9, 11UI, 10US, 62UI, array)
			Class8.smethod_4(num9, num10, num7, num8, 2UI, 15US, 63UI, array)
			Class8.smethod_4(num8, num9, num10, num7, 9UI, 21US, 64UI, array)
			num7 += num14
			num8 += num15
			num9 += num16
			num10 += num17
		Next
		Dim array4 As Byte() = New Byte(15) {}
		Array.Copy(BitConverter.GetBytes(num7), 0, array4, 0, 4)
		Array.Copy(BitConverter.GetBytes(num8), 0, array4, 4, 4)
		Array.Copy(BitConverter.GetBytes(num9), 0, array4, 8, 4)
		Array.Copy(BitConverter.GetBytes(num10), 0, array4, 12, 4)
		Return array4
	End Function

	' Token: 0x0600005C RID: 92 RVA: 0x00002694 File Offset: 0x00000894
	Private Shared Sub smethod_1(ByRef uint_1 As UInteger, uint_2 As UInteger, uint_3 As UInteger, uint_4 As UInteger, uint_5 As UInteger, ushort_0 As UShort, uint_6 As UInteger, uint_7 As UInteger())
		uint_1 = uint_2 + Class8.smethod_5(uint_1 + ((uint_2 And uint_3) Or (Not uint_2 And uint_4)) + uint_7(CInt(CType(uint_5, UIntPtr))) + Class8.uint_0(CInt(CType((uint_6 - 1UI), UIntPtr))), ushort_0)
	End Sub

	' Token: 0x0600005D RID: 93 RVA: 0x000026BF File Offset: 0x000008BF
	Private Shared Sub smethod_2(ByRef uint_1 As UInteger, uint_2 As UInteger, uint_3 As UInteger, uint_4 As UInteger, uint_5 As UInteger, ushort_0 As UShort, uint_6 As UInteger, uint_7 As UInteger())
		uint_1 = uint_2 + Class8.smethod_5(uint_1 + ((uint_2 And uint_4) Or (uint_3 And Not uint_4)) + uint_7(CInt(CType(uint_5, UIntPtr))) + Class8.uint_0(CInt(CType((uint_6 - 1UI), UIntPtr))), ushort_0)
	End Sub

	' Token: 0x0600005E RID: 94 RVA: 0x000026EA File Offset: 0x000008EA
	Private Shared Sub smethod_3(ByRef uint_1 As UInteger, uint_2 As UInteger, uint_3 As UInteger, uint_4 As UInteger, uint_5 As UInteger, ushort_0 As UShort, uint_6 As UInteger, uint_7 As UInteger())
		uint_1 = uint_2 + Class8.smethod_5(uint_1 + (uint_2 Xor uint_3 Xor uint_4) + uint_7(CInt(CType(uint_5, UIntPtr))) + Class8.uint_0(CInt(CType((uint_6 - 1UI), UIntPtr))), ushort_0)
	End Sub

	' Token: 0x0600005F RID: 95 RVA: 0x00002712 File Offset: 0x00000912
	Private Shared Sub smethod_4(ByRef uint_1 As UInteger, uint_2 As UInteger, uint_3 As UInteger, uint_4 As UInteger, uint_5 As UInteger, ushort_0 As UShort, uint_6 As UInteger, uint_7 As UInteger())
		uint_1 = uint_2 + Class8.smethod_5(uint_1 + (uint_3 Xor (uint_2 Or Not uint_4)) + uint_7(CInt(CType(uint_5, UIntPtr))) + Class8.uint_0(CInt(CType((uint_6 - 1UI), UIntPtr))), ushort_0)
	End Sub

	' Token: 0x06000060 RID: 96 RVA: 0x0000273B File Offset: 0x0000093B
	Private Shared Function smethod_5(uint_1 As UInteger, ushort_0 As UShort) As UInteger
		Return uint_1 >> CInt((32US - ushort_0)) Or uint_1 << CInt(ushort_0)
	End Function

	' Token: 0x06000061 RID: 97 RVA: 0x0000274D File Offset: 0x0000094D
	Friend Shared Function smethod_6() As Boolean
		If Not Class8.KpuekOaAnu Then
			Class8.smethod_8()
			Class8.KpuekOaAnu = True
		End If
		Return Class8.bool_0
	End Function

	' Token: 0x06000062 RID: 98 RVA: 0x00004080 File Offset: 0x00002280
	Friend Shared Function smethod_7() As SymmetricAlgorithm
		Dim result As SymmetricAlgorithm = Nothing
		If Class8.smethod_6() Then
			result = New AesCryptoServiceProvider()
		Else
			Try
				result = New RijndaelManaged()
			Catch
				result = CType(Activator.CreateInstance("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Security.Cryptography.AesCryptoServiceProvider").Unwrap(), SymmetricAlgorithm)
			End Try
		End If
		Return result
	End Function

	' Token: 0x06000063 RID: 99 RVA: 0x000040D4 File Offset: 0x000022D4
	Friend Shared Sub smethod_8()
		Try
			Class8.bool_0 = CryptoConfig.AllowOnlyFipsAlgorithms
		Catch
		End Try
	End Sub

	' Token: 0x06000064 RID: 100 RVA: 0x00002766 File Offset: 0x00000966
	Friend Shared Function smethod_9(byte_4 As Byte()) As Byte()
		If Not Class8.smethod_6() Then
			Return New MD5CryptoServiceProvider().ComputeHash(byte_4)
		End If
		Return Class8.smethod_0(byte_4)
	End Function

	' Token: 0x06000065 RID: 101 RVA: 0x00004104 File Offset: 0x00002304
	<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
	Friend Shared Function smethod_10(int_5 As Integer) As Boolean
		If Class8.byte_3.Length = 0 Then
			Dim binaryReader As BinaryReader = New BinaryReader(Class8.assembly_0.GetManifestResourceStream("{11111-22222-20001-00000}"))
			binaryReader.BaseStream.Position = 0L
			RSACryptoServiceProvider.UseMachineKeyStore = True
			Dim array As Byte() = binaryReader.ReadBytes(CInt(binaryReader.BaseStream.Length))
			Dim rgbKey As Byte() = New Class8().method_3()
			Dim array2 As Byte() = New Class8().method_2()
			Dim publicKeyToken As Byte() = Class8.assembly_0.GetName().GetPublicKeyToken()
			If publicKeyToken IsNot Nothing AndAlso publicKeyToken.Length > 0 Then
				array2(1) = publicKeyToken(0)
				array2(3) = publicKeyToken(1)
				array2(5) = publicKeyToken(2)
				array2(7) = publicKeyToken(3)
				array2(9) = publicKeyToken(4)
				array2(11) = publicKeyToken(5)
				array2(13) = publicKeyToken(6)
				array2(15) = publicKeyToken(7)
			End If
			Dim symmetricAlgorithm As SymmetricAlgorithm = Class8.smethod_7()
			symmetricAlgorithm.Mode = CipherMode.CBC
			Dim transform As ICryptoTransform = symmetricAlgorithm.CreateDecryptor(rgbKey, array2)
			Dim memoryStream As MemoryStream = New MemoryStream()
			Dim cryptoStream As CryptoStream = New CryptoStream(memoryStream, transform, CryptoStreamMode.Write)
			cryptoStream.Write(array, 0, array.Length)
			cryptoStream.FlushFinalBlock()
			Class8.byte_3 = memoryStream.ToArray()
			memoryStream.Close()
			cryptoStream.Close()
			binaryReader.Close()
		End If
		If Class8.byte_0.Length = 0 Then
			Class8.byte_0 = Class8.smethod_18(Class8.smethod_17(Class8.assembly_0).ToString())
		End If
		Dim num As Integer = 0
		Try
			num = BitConverter.ToInt32(New Byte() { Class8.byte_3(int_5), Class8.byte_3(int_5 + 1), Class8.byte_3(int_5 + 2), Class8.byte_3(int_5 + 3) }, 0)
		Catch
		End Try
		Try
			If Class8.byte_0(num) = 128 Then
				Return True
			End If
		Catch
		End Try
		Return False
	End Function

	' Token: 0x06000066 RID: 102 RVA: 0x00002781 File Offset: 0x00000981
	Private Shared Function smethod_11(uint_1 As UInteger) As UInteger
		Return CUInt("{11111-22222-10009-11112}".Length)
	End Function

	' Token: 0x06000067 RID: 103 RVA: 0x000042D4 File Offset: 0x000024D4
	<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
	Friend Shared Function smethod_12(int_5 As Integer) As String
		'
An exception occurred when decompiling this method (06000067)

ICSharpCode.Decompiler.DecompilerException: Error decompiling System.String Class8::smethod_12(System.Int32)

 ---> System.Exception: Inconsistent stack size at IL_19C2
   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDef methodDef) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILAstBuilder.cs:line 443
   at ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDef methodDef, Boolean optimize, DecompilerContext context) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILAstBuilder.cs:line 269
   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable`1 parameters, MethodDebugInfoBuilder& builder) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 112
   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDef methodDef, DecompilerContext context, AutoPropertyProvider autoPropertyProvider, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, StringBuilder sb, MethodDebugInfoBuilder& stmtsBuilder) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 88
   --- End of inner exception stack trace ---
   at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDef methodDef, DecompilerContext context, AutoPropertyProvider autoPropertyProvider, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, StringBuilder sb, MethodDebugInfoBuilder& stmtsBuilder) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 92
   at ICSharpCode.Decompiler.Ast.AstBuilder.AddMethodBody(EntityDeclaration methodNode, EntityDeclaration& updatedNode, MethodDef method, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, MethodKind methodKind) in D:\a\dnSpy\dnSpy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstBuilder.cs:line 1533

	End Function

	' Token: 0x06000068 RID: 104 RVA: 0x00006BBC File Offset: 0x00004DBC
	<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
	Friend Shared Function smethod_13(string_1 As String) As String
		"{11111-22222-50001-00000}".Trim()
		Dim array As Byte() = Convert.FromBase64String(string_1)
		Return Encoding.Unicode.GetString(array, 0, array.Length)
	End Function

	' Token: 0x06000069 RID: 105 RVA: 0x0000278D File Offset: 0x0000098D
	Private Shared Function smethod_14() As Integer
		Return 5
	End Function

	' Token: 0x0600006A RID: 106 RVA: 0x00006BEC File Offset: 0x00004DEC
	Private Shared Sub smethod_15()
		Try
			RSACryptoServiceProvider.UseMachineKeyStore = True
		Catch
		End Try
	End Sub

	' Token: 0x0600006B RID: 107 RVA: 0x00006C18 File Offset: 0x00004E18
	Private Shared Function smethod_16(intptr_3 As IntPtr, type_0 As Type) As [Delegate]
		Return CType(GetType(Marshal).GetMethod("GetDelegateForFunctionPointer", New Type() { GetType(IntPtr), GetType(Type) }).Invoke(Nothing, New Object() { intptr_3, type_0 }), [Delegate])
	End Function

	' Token: 0x0600006C RID: 108 RVA: 0x00006C80 File Offset: 0x00004E80
	Friend Shared Function smethod_17(assembly_1 As Assembly) As Object
		Try
			If File.Exists(CType(assembly_1, Assembly).Location) Then
				Return CType(assembly_1, Assembly).Location
			End If
		Catch
		End Try
		Try
			If File.Exists(CType(assembly_1, Assembly).GetName().CodeBase.ToString().Replace("file:///", "")) Then
				Return CType(assembly_1, Assembly).GetName().CodeBase.ToString().Replace("file:///", "")
			End If
		Catch
		End Try
		Try
			If File.Exists(assembly_1.[GetType]().GetProperty("Location").GetValue(assembly_1, New Object(-1) {}).ToString()) Then
				Return assembly_1.[GetType]().GetProperty("Location").GetValue(assembly_1, New Object(-1) {}).ToString()
			End If
		Catch
		End Try
		Return ""
	End Function

	' Token: 0x0600006D RID: 109 RVA: 0x00006D90 File Offset: 0x00004F90
	<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
	Private Shared Function smethod_18(string_1 As String) As Byte()
		Dim array As Byte()
		Using fileStream As FileStream = New FileStream(string_1, FileMode.Open, FileAccess.Read, FileShare.Read)
			Dim num As Integer = 0
			Dim length As Long = fileStream.Length
			Dim i As Integer = CInt(length)
			array = New Byte(i - 1) {}
			While i > 0
				Dim num2 As Integer = fileStream.Read(array, num, i)
				num += num2
				i -= num2
			End While
		End Using
		Return array
	End Function

	' Token: 0x0600006E RID: 110 RVA: 0x00006DF8 File Offset: 0x00004FF8
	<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
	Private Shared Function smethod_19(byte_4 As Byte()) As Byte()
		Dim memoryStream As MemoryStream = New MemoryStream()
		Dim symmetricAlgorithm As SymmetricAlgorithm = Class8.smethod_7()
		symmetricAlgorithm.Key = New Byte() { 101, 42, 99, 65, 187, 149, 216, 52, 94, 1, 1, 185, 150, 36, 88, 12, 38, 64, 77, 98, 246, 60, 201, 32, 48, 32, 190, 203, 33, 143, 99, 9 }
		symmetricAlgorithm.IV = New Byte() { 194, 156, 92, 3, 213, 149, 198, 226, 143, 127, 32, 1, 98, 231, 154, 28 }
		Dim cryptoStream As CryptoStream = New CryptoStream(memoryStream, symmetricAlgorithm.CreateDecryptor(), CryptoStreamMode.Write)
		cryptoStream.Write(byte_4, 0, byte_4.Length)
		cryptoStream.Close()
		Return memoryStream.ToArray()
	End Function

	' Token: 0x0600006F RID: 111 RVA: 0x00006E68 File Offset: 0x00005068
	Private Function method_0() As Byte()
		Return Nothing
	End Function

	' Token: 0x06000070 RID: 112 RVA: 0x00006E68 File Offset: 0x00005068
	Private Function method_1() As Byte()
		Return Nothing
	End Function

	' Token: 0x06000071 RID: 113 RVA: 0x00006E78 File Offset: 0x00005078
	Private Function method_2() As Byte()
		Dim text As String = "{11111-22222-20001-00001}"
		If text.Length > 0 Then
			Return New Byte() { 1, 2 }
		End If
		Return New Byte() { 1, 2 }
	End Function

	' Token: 0x06000072 RID: 114 RVA: 0x00006EB8 File Offset: 0x000050B8
	Private Function method_3() As Byte()
		Dim text As String = "{11111-22222-20001-00002}"
		If text.Length > 0 Then
			Return New Byte() { 1, 2 }
		End If
		Return New Byte() { 1, 2 }
	End Function

	' Token: 0x06000073 RID: 115 RVA: 0x00006EF8 File Offset: 0x000050F8
	Private Function method_4() As Byte()
		Dim text As String = "{11111-22222-30001-00001}"
		If text.Length > 0 Then
			Return New Byte() { 1, 2 }
		End If
		Return New Byte() { 1, 2 }
	End Function

	' Token: 0x06000074 RID: 116 RVA: 0x00006F38 File Offset: 0x00005138
	Private Function method_5() As Byte()
		Dim text As String = "{11111-22222-30001-00002}"
		If text.Length > 0 Then
			Return New Byte() { 1, 2 }
		End If
		Return New Byte() { 1, 2 }
	End Function

	' Token: 0x06000075 RID: 117 RVA: 0x00006F78 File Offset: 0x00005178
	Friend Function method_6() As Byte()
		Dim text As String = "{11111-22222-40001-00001}"
		If text.Length > 0 Then
			Return New Byte() { 1, 2 }
		End If
		Return New Byte() { 1, 2 }
	End Function

	' Token: 0x06000076 RID: 118 RVA: 0x00006FB8 File Offset: 0x000051B8
	Friend Function method_7() As Byte()
		Dim text As String = "{11111-22222-40001-00002}"
		If text.Length > 0 Then
			Return New Byte() { 1, 2 }
		End If
		Return New Byte() { 1, 2 }
	End Function

	' Token: 0x06000077 RID: 119 RVA: 0x00006FF8 File Offset: 0x000051F8
	Friend Function method_8() As Byte()
		Return Nothing
	End Function

	' Token: 0x06000078 RID: 120 RVA: 0x00006FF8 File Offset: 0x000051F8
	Friend Function method_9() As Byte()
		Return Nothing
	End Function

	' Token: 0x0600008D RID: 141 RVA: 0x00002568 File Offset: 0x00000768
	Friend Shared Function smethod_20() As Boolean
		Return True
	End Function

	' Token: 0x0600008E RID: 142 RVA: 0x00002798 File Offset: 0x00000998
	Friend Shared Function smethod_21() As Boolean
		Return False
	End Function

	' Token: 0x04000023 RID: 35
	Private Shared uint_0 As UInteger()

	' Token: 0x04000024 RID: 36
	Private Shared bool_0 As Boolean

	' Token: 0x04000025 RID: 37
	Private Shared byte_0 As Byte()

	' Token: 0x04000026 RID: 38
	Private Shared byte_1 As Byte()

	' Token: 0x04000027 RID: 39
	Private Shared sortedList_0 As SortedList

	' Token: 0x04000028 RID: 40
	Private Shared int_0 As Integer

	' Token: 0x04000029 RID: 41
	Friend Shared delegate1_0 As Class8.Delegate1

	' Token: 0x0400002A RID: 42
	Private Shared long_0 As Long

	' Token: 0x0400002B RID: 43
	<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
	Private Shared bool_1 As Boolean

	' Token: 0x0400002C RID: 44
	Friend Shared hashtable_0 As Hashtable

	' Token: 0x0400002D RID: 45
	Private Shared bool_2 As Boolean = False

	' Token: 0x0400002E RID: 46
	Private Shared bool_3 As Boolean

	' Token: 0x0400002F RID: 47
	Private Shared bool_4 As Boolean

	' Token: 0x04000030 RID: 48
	Private Shared int_1 As Integer

	' Token: 0x04000031 RID: 49
	Private Shared KpuekOaAnu As Boolean

	' Token: 0x04000032 RID: 50
	Private Shared assembly_0 As Assembly = GetType(Class8).Assembly

	' Token: 0x04000033 RID: 51
	Private Shared int_2 As Integer

	' Token: 0x04000034 RID: 52
	Private Shared int_3 As Integer

	' Token: 0x04000035 RID: 53
	Private Shared intptr_0 As IntPtr

	' Token: 0x04000036 RID: 54
	Private Shared bool_5 As Boolean

	' Token: 0x04000037 RID: 55
	Private Shared intptr_1 As IntPtr

	' Token: 0x04000038 RID: 56
	Private Shared byte_2 As Byte()

	' Token: 0x04000039 RID: 57
	Private Shared intptr_2 As IntPtr

	' Token: 0x0400003A RID: 58
	Private Shared ilgepGragg As Long

	' Token: 0x0400003B RID: 59
	Friend Shared delegate1_1 As Class8.Delegate1

	' Token: 0x0400003C RID: 60
	Private Shared string_0 As String()

	' Token: 0x0400003D RID: 61
	Private Shared int_4 As Integer()

	' Token: 0x0400003E RID: 62
	Private Shared byte_3 As Byte()

	' Token: 0x02000016 RID: 22
	Friend Class Attribute0
		Inherits Attribute

		' Token: 0x0600008F RID: 143 RVA: 0x0000279B File Offset: 0x0000099B
		<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
		Public Sub New(object_0 As Object)
		End Sub

		' Token: 0x02000017 RID: 23
		Friend Class Class9(Of T)
		End Class
	End Class

	' Token: 0x02000018 RID: 24
	Friend Class Class10
		' Token: 0x06000091 RID: 145 RVA: 0x00007008 File Offset: 0x00005208
		<Class8.Attribute0(GetType(Class8.Attribute0.Class9(Of Object)()))>
		Friend Shared Function smethod_0(string_0 As String, string_1 As String) As String
			Dim bytes As Byte() = Encoding.Unicode.GetBytes(string_0)
			Dim array As Byte() = bytes
			Dim key As Byte() = New Byte() { 82, 102, 104, 110, 32, 77, 24, 34, 118, 181, 51, 17, 18, 51, 12, 109, 10, 32, 77, 24, 34, 158, 161, 41, 97, 28, 118, 181, 5, 25, 1, 88 }
			Dim iv As Byte() = Class8.smethod_9(Encoding.Unicode.GetBytes(string_1))
			Dim memoryStream As MemoryStream = New MemoryStream()
			Dim symmetricAlgorithm As SymmetricAlgorithm = Class8.smethod_7()
			symmetricAlgorithm.Key = key
			symmetricAlgorithm.IV = iv
			Dim cryptoStream As CryptoStream = New CryptoStream(memoryStream, symmetricAlgorithm.CreateEncryptor(), CryptoStreamMode.Write)
			cryptoStream.Write(array, 0, array.Length)
			cryptoStream.Close()
			Return Convert.ToBase64String(memoryStream.ToArray())
		End Function
	End Class

	' Token: 0x02000019 RID: 25
	' (Invoke) Token: 0x06000094 RID: 148
	<UnmanagedFunctionPointer(CallingConvention.StdCall)>
	Friend Delegate Function Delegate1(classthis As IntPtr, comp As IntPtr, info As IntPtr, <MarshalAs(UnmanagedType.U4)> flags As UInteger, nativeEntry As IntPtr, ByRef nativeSizeOfCode As UInteger) As UInteger

	' Token: 0x0200001A RID: 26
	' (Invoke) Token: 0x06000098 RID: 152
	<UnmanagedFunctionPointer(CallingConvention.StdCall)>
	Private Delegate Function Delegate2() As IntPtr

	' Token: 0x0200001B RID: 27
	Friend Structure Struct2
		' Token: 0x0400003F RID: 63
		Friend bool_0 As Boolean

		' Token: 0x04000040 RID: 64
		Friend byte_0 As Byte()
	End Structure

	' Token: 0x0200001C RID: 28
	<Flags()>
	Private Enum Enum0
	End Enum
End Class
